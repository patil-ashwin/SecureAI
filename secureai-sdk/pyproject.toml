[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secureai"
version = "0.1.0"
description = "AI Privacy Protection Platform - SDK for Python"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "SecureAI Team", email = "team@secureai.com"}
]
keywords = ["ai", "privacy", "encryption", "fpe", "pii", "gdpr", "hipaa", "rag", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "cryptography>=41.0.0",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
# Core extras
pii-detection = [
    "presidio-analyzer>=2.2.0",
    "presidio-anonymizer>=2.2.0",
]
advanced-ner = [
    "spacy>=3.7.0",
    "transformers>=4.35.0",
]

# Web framework integrations
fastapi = ["fastapi>=0.104.0", "starlette>=0.27.0"]
flask = ["flask>=3.0.0"]
django = ["django>=4.2.0"]

# LLM integrations
openai = ["openai>=1.3.0"]
anthropic = ["anthropic>=0.7.0"]
langchain = ["langchain>=0.1.0", "langchain-openai>=0.0.2"]
llamaindex = ["llama-index>=0.9.0"]

# RAG / Vector DB integrations
pinecone = ["pinecone-client>=3.0.0"]
weaviate = ["weaviate-client>=3.25.0"]
qdrant = ["qdrant-client>=1.7.0"]
chromadb = ["chromadb>=0.4.0"]

# Development
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

# All extras
all = [
    "secureai[pii-detection,advanced-ner,fastapi,flask,django,openai,anthropic,langchain,llamaindex,pinecone,weaviate,qdrant,chromadb]"
]

[project.urls]
Homepage = "https://github.com/secureai/secureai-python"
Documentation = "https://docs.secureai.com"
Repository = "https://github.com/secureai/secureai-python"
"Bug Tracker" = "https://github.com/secureai/secureai-python/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["secureai*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=secureai --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["presidio.*", "spacy.*", "transformers.*", "pinecone.*", "weaviate.*", "qdrant_client.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["secureai"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

